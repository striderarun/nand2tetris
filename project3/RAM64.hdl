// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/3/a/RAM64.hdl
/**
 * Memory of sixty four 16-bit registers.
 * If load is asserted, the value of the register selected by
 * address is set to in; Otherwise, the value does not change.
 * The value of the selected register is emitted by out.
 */
CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    // We have 64 registers, so we need log64 = 6 address bits
    // However, we are building it using 8 RAM8 parts
    // So use first 3 address bits to select the RAM8 part
    // Send the next 3 address bits to the selected RAM8 part to select the register inside the RAM8 part
    
    PARTS:
    // Fan out the load to RAM8 parts based on first 3 bits of address selector
    // First 3 bits to determine which RAM8 part
    DMux8Way(in=load , sel=address[3..5] , a=a , b=b , c=c , d=d , e=e , f=f , g=g , h=h);

    // Next 3 bits to select the RAM8 part
    RAM8(in=in , load=a , address=address[0..2] , out=outa );
    RAM8(in=in , load=b , address=address[0..2] , out=outb );
    RAM8(in=in , load=c , address=address[0..2] , out=outc );
    RAM8(in=in , load=d , address=address[0..2] , out=outd );
    RAM8(in=in , load=e , address=address[0..2] , out=oute );
    RAM8(in=in , load=f , address=address[0..2] , out=outf );
    RAM8(in=in , load=g , address=address[0..2] , out=outg );
    RAM8(in=in , load=h , address=address[0..2] , out=outh );

    // Now, select the RAM8 part which has the output based on first 3 bits of address
    Mux8Way16(a=outa , b=outb , c=outc , d=outd , e=oute , f=outf , g=outg, h=outh , sel=address[3..5] , out=out);

}