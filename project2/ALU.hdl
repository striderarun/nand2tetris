// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    // zx and nx
    // if (zx == 1) sets x = 0 else x
    Mux16(a=x , b=false , sel=zx , out=zerox);
    // !x is calculated on top of modified x value
    Not16(in=zerox , out=notx);
    // if (nx == 1) sets x = !x 
    // nx is applied on top of modified x value
    Mux16(a=zerox , b=notx , sel=nx , out=modx);
    
    // zy and ny
    Mux16(a=y , b=false , sel=zy , out=zeroy);
    // !y is calculated on modified x value
    Not16(in=zeroy , out=noty);
    Mux16(a=zeroy , b=noty , sel=ny , out=mody);

    // x + y on modified x and y values
    Add16(a=modx , b=mody, out=XPlusY);
    // x & y on modified x and y values
    And16(a=modx , b=mody , out=XAndY);
    // f choose between x+y or x&y
    Mux16(a=XAndY , b=XPlusY , sel=f , out=fout);
    // !fout
    Not16(in=fout , out=nofout);
    
    // no and control bit ng
    // if (no == 1) set out = !out
    // Also, store msb as ng
    // Because if (out < 0)  ng = 1, else ng = 0
    // Meaning, ng == msb since msb==1 when out<0 and msb==0 otherwise
    // Set both out and ng in single statement below
    Mux16(a=fout , b=nofout , sel=no , out=out, out[0..7]=out0to7bits, out[8..15]=out8to15bits, out[15]=ng);

    // control bit zr
    // if (out == 0) zr = 1, else zr = 0
    // out 16 bit value
    // To check if out==0, we can take bitwise Or of all 16 bits
    // If Or16Way(out) == 0, means, all 16 bits are 0, which implies out==0, then set zr=1
    // If Or16Way(out) == 1, then atleast 1 bit is 1, which implies out!=0, then set zr=0
    // So we calculate Or16Way(out)
    // Then zr = 1 if Or16Way(out)==0
    //      zr = 0, if Or16Way(out)==1
    // Implies, zr = Not(Or16Way(out))
    // Also, we don't have Or16Way(), we only have Or8Way chip available
    // So, Or16Way(out) = Or(Or8Way(out[0..7]), Or8Way(out[8..15]))
    
    // We can't pass out[0..15] directly as input, use the previous Mux chip to address the two halves in separate variables
    Or8Way(in=out0to7bits , out=Or0to7bits);
    Or8Way(in=out8to15bits , out=Or8to15bits);
    Or(a=Or0to7bits , b=Or8to15bits , out=Or16WayOut );
    Not(in=Or16WayOut, out=zr);



}